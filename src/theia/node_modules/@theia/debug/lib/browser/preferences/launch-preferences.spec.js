"use strict";
/********************************************************************************
 * Copyright (C) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
// tslint:disable:no-unused-expression
var jsdom_1 = require("@theia/core/lib/browser/test/jsdom");
var disableJSDOM = jsdom_1.enableJSDOM();
var path = require("path");
var fs = require("fs-extra");
var assert = require("assert");
var inversify_1 = require("inversify");
var file_uri_1 = require("@theia/core/lib/node/file-uri");
var disposable_1 = require("@theia/core/lib/common/disposable");
var preference_service_1 = require("@theia/core/lib/browser/preferences/preference-service");
var frontend_application_bindings_1 = require("@theia/core/lib/browser/frontend-application-bindings");
var filesystem_backend_module_1 = require("@theia/filesystem/lib/node/filesystem-backend-module");
var filesystem_frontend_module_1 = require("@theia/filesystem/lib/browser/filesystem-frontend-module");
var frontend_application_config_provider_1 = require("@theia/core/lib/browser/frontend-application-config-provider");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var filesystem_watcher_1 = require("@theia/filesystem/lib/browser/filesystem-watcher");
var filesystem_preferences_1 = require("@theia/filesystem/lib/browser/filesystem-preferences");
var filesystem_1 = require("@theia/filesystem/lib/common/filesystem");
var logger_backend_module_1 = require("@theia/core/lib/node/logger-backend-module");
var browser_1 = require("@theia/workspace/lib/browser");
var window_service_1 = require("@theia/core/lib/browser/window/window-service");
var mock_window_service_1 = require("@theia/core/lib/browser/window/test/mock-window-service");
var mock_workspace_server_1 = require("@theia/workspace/lib/common/test/mock-workspace-server");
var workspace_protocol_1 = require("@theia/workspace/lib/common/workspace-protocol");
var preference_bindings_1 = require("@theia/preferences/lib/browser/preference-bindings");
var user_storage_frontend_module_1 = require("@theia/userstorage/lib/browser/user-storage-frontend-module");
var filesystem_watcher_protocol_1 = require("@theia/filesystem/lib/common/filesystem-watcher-protocol");
var mock_filesystem_watcher_server_1 = require("@theia/filesystem/lib/common/test/mock-filesystem-watcher-server");
var launch_preferences_1 = require("./launch-preferences");
disableJSDOM();
process.on('unhandledRejection', function (reason, promise) {
    console.error(reason);
    throw reason;
});
/**
 * Expectations should be tested and aligned against VS Code.
 * See https://github.com/akosyakov/vscode-launch/blob/master/src/test/extension.test.ts
 */
describe('Launch Preferences', function () {
    var defaultLaunch = {
        'configurations': [],
        'compounds': []
    };
    var validConfiguration = {
        'name': 'Launch Program',
        'program': '${file}',
        'request': 'launch',
        'type': 'node',
    };
    var validConfiguration2 = {
        'name': 'Launch Program 2',
        'program': '${file}',
        'request': 'launch',
        'type': 'node',
    };
    var bogusConfiguration = {};
    var validCompound = {
        'name': 'Compound',
        'configurations': [
            'Launch Program',
            'Launch Program 2'
        ]
    };
    var bogusCompound = {};
    var bogusCompound2 = {
        'name': 'Compound 2',
        'configurations': [
            'Foo',
            'Launch Program 2'
        ]
    };
    var validLaunch = {
        configurations: [validConfiguration, validConfiguration2],
        compounds: [validCompound]
    };
    testSuite({
        name: 'No Preferences',
        expectation: defaultLaunch
    });
    testLaunchAndSettingsSuite({
        name: 'Empty With Version',
        launch: {
            'version': '0.2.0'
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [],
            'compounds': []
        }
    });
    testLaunchAndSettingsSuite({
        name: 'Empty With Version And Configurations',
        launch: {
            'version': '0.2.0',
            'configurations': [],
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [],
            'compounds': []
        }
    });
    testLaunchAndSettingsSuite({
        name: 'Empty With Version And Compounds',
        launch: {
            'version': '0.2.0',
            'compounds': []
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [],
            'compounds': []
        }
    });
    testLaunchAndSettingsSuite({
        name: 'Valid Conf',
        launch: {
            'version': '0.2.0',
            'configurations': [validConfiguration]
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [validConfiguration],
            'compounds': []
        }
    });
    testLaunchAndSettingsSuite({
        name: 'Bogus Conf',
        launch: {
            'version': '0.2.0',
            'configurations': [validConfiguration, bogusConfiguration]
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [validConfiguration, bogusConfiguration],
            'compounds': []
        }
    });
    testLaunchAndSettingsSuite({
        name: 'Completely Bogus Conf',
        launch: {
            'version': '0.2.0',
            'configurations': { 'valid': validConfiguration, 'bogus': bogusConfiguration }
        },
        expectation: {
            'version': '0.2.0',
            'configurations': { 'valid': validConfiguration, 'bogus': bogusConfiguration },
            'compounds': []
        }
    });
    var arrayBogusLaunch = [
        'version', '0.2.0',
        'configurations', { 'valid': validConfiguration, 'bogus': bogusConfiguration }
    ];
    testSuite({
        name: 'Array Bogus Launch Configuration',
        launch: arrayBogusLaunch,
        expectation: {
            '0': 'version',
            '1': '0.2.0',
            '2': 'configurations',
            '3': { 'valid': validConfiguration, 'bogus': bogusConfiguration },
            'compounds': [],
            'configurations': []
        },
        inspectExpectation: {
            preferenceName: 'launch',
            defaultValue: defaultLaunch,
            workspaceValue: {
                '0': 'version',
                '1': '0.2.0',
                '2': 'configurations',
                '3': { 'valid': validConfiguration, 'bogus': bogusConfiguration }
            }
        }
    });
    testSuite({
        name: 'Array Bogus Settings Configuration',
        settings: {
            launch: arrayBogusLaunch
        },
        expectation: {
            '0': 'version',
            '1': '0.2.0',
            '2': 'configurations',
            '3': { 'valid': validConfiguration, 'bogus': bogusConfiguration },
            'compounds': [],
            'configurations': []
        },
        inspectExpectation: {
            preferenceName: 'launch',
            defaultValue: defaultLaunch,
            workspaceValue: arrayBogusLaunch
        }
    });
    testSuite({
        name: 'Null Bogus Launch Configuration',
        // tslint:disable-next-line:no-null-keyword
        launch: null,
        expectation: {
            'compounds': [],
            'configurations': []
        }
    });
    testSuite({
        name: 'Null Bogus Settings Configuration',
        settings: {
            // tslint:disable-next-line:no-null-keyword
            'launch': null
        },
        expectation: {}
    });
    testLaunchAndSettingsSuite({
        name: 'Valid Compound',
        launch: {
            'version': '0.2.0',
            'configurations': [validConfiguration, validConfiguration2],
            'compounds': [validCompound]
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [validConfiguration, validConfiguration2],
            'compounds': [validCompound]
        }
    });
    testLaunchAndSettingsSuite({
        name: 'Valid And Bogus',
        launch: {
            'version': '0.2.0',
            'configurations': [validConfiguration, validConfiguration2, bogusConfiguration],
            'compounds': [validCompound, bogusCompound, bogusCompound2]
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [validConfiguration, validConfiguration2, bogusConfiguration],
            'compounds': [validCompound, bogusCompound, bogusCompound2]
        }
    });
    testSuite({
        name: 'Mixed',
        launch: {
            'version': '0.2.0',
            'configurations': [validConfiguration, bogusConfiguration],
            'compounds': [bogusCompound, bogusCompound2]
        },
        settings: {
            launch: {
                'version': '0.2.0',
                'configurations': [validConfiguration2],
                'compounds': [validCompound]
            }
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [validConfiguration, bogusConfiguration],
            'compounds': [bogusCompound, bogusCompound2]
        }
    });
    testSuite({
        name: 'Mixed Launch Without Configurations',
        launch: {
            'version': '0.2.0',
            'compounds': [bogusCompound, bogusCompound2]
        },
        settings: {
            launch: {
                'version': '0.2.0',
                'configurations': [validConfiguration2],
                'compounds': [validCompound]
            }
        },
        expectation: {
            'version': '0.2.0',
            'configurations': [validConfiguration2],
            'compounds': [bogusCompound, bogusCompound2]
        },
        inspectExpectation: {
            preferenceName: 'launch',
            defaultValue: defaultLaunch,
            workspaceValue: {
                'version': '0.2.0',
                'configurations': [validConfiguration2],
                'compounds': [bogusCompound, bogusCompound2]
            }
        }
    });
    function testLaunchAndSettingsSuite(_a) {
        var name = _a.name, expectation = _a.expectation, launch = _a.launch, only = _a.only, configMode = _a.configMode;
        testSuite({
            name: name + ' Launch Configuration',
            launch: launch,
            expectation: expectation,
            only: only,
            configMode: configMode
        });
        testSuite({
            name: name + ' Settings Configuration',
            settings: {
                'launch': launch
            },
            expectation: expectation,
            only: only,
            configMode: configMode
        });
    }
    function testSuite(options) {
        describe(options.name, function () {
            if (options.configMode) {
                testConfigSuite(options);
            }
            else {
                testConfigSuite(__assign({}, options, { configMode: '.theia' }));
                if (options.settings || options.launch) {
                    testConfigSuite(__assign({}, options, { configMode: '.vscode' }));
                    testConfigSuite(__assign({}, options, { configMode: ['.theia', '.vscode'] }));
                }
            }
        });
    }
    function testConfigSuite(_a) {
        var _this = this;
        var configMode = _a.configMode, expectation = _a.expectation, inspectExpectation = _a.inspectExpectation, settings = _a.settings, launch = _a.launch, only = _a.only;
        describe(JSON.stringify(configMode, undefined, 2), function () {
            var configPaths = Array.isArray(configMode) ? configMode : [configMode];
            var rootPath = path.resolve(__dirname, '..', '..', '..', 'launch-preference-test-temp');
            var rootUri = file_uri_1.FileUri.create(rootPath).toString();
            var preferences;
            var toTearDown = new disposable_1.DisposableCollection();
            beforeEach(function () {
                return __awaiter(this, void 0, void 0, function () {
                    var configPaths_1, configPaths_1_1, configPath, settingsPath, configPaths_2, configPaths_2_1, configPath, launchPath, container, bind, unbind, workspaceServer, impl;
                    var e_1, _a, e_2, _b;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                toTearDown.push(disposable_1.Disposable.create(jsdom_1.enableJSDOM()));
                                frontend_application_config_provider_1.FrontendApplicationConfigProvider.set({
                                    'applicationName': 'test',
                                });
                                fs.removeSync(rootPath);
                                fs.ensureDirSync(rootPath);
                                toTearDown.push(disposable_1.Disposable.create(function () { return fs.removeSync(rootPath); }));
                                if (settings) {
                                    try {
                                        for (configPaths_1 = __values(configPaths), configPaths_1_1 = configPaths_1.next(); !configPaths_1_1.done; configPaths_1_1 = configPaths_1.next()) {
                                            configPath = configPaths_1_1.value;
                                            settingsPath = path.resolve(rootPath, configPath, 'settings.json');
                                            fs.ensureFileSync(settingsPath);
                                            fs.writeFileSync(settingsPath, JSON.stringify(settings), 'utf-8');
                                        }
                                    }
                                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                    finally {
                                        try {
                                            if (configPaths_1_1 && !configPaths_1_1.done && (_a = configPaths_1.return)) _a.call(configPaths_1);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                    }
                                }
                                if (launch) {
                                    try {
                                        for (configPaths_2 = __values(configPaths), configPaths_2_1 = configPaths_2.next(); !configPaths_2_1.done; configPaths_2_1 = configPaths_2.next()) {
                                            configPath = configPaths_2_1.value;
                                            launchPath = path.resolve(rootPath, configPath, 'launch.json');
                                            fs.ensureFileSync(launchPath);
                                            fs.writeFileSync(launchPath, JSON.stringify(launch), 'utf-8');
                                        }
                                    }
                                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                    finally {
                                        try {
                                            if (configPaths_2_1 && !configPaths_2_1.done && (_b = configPaths_2.return)) _b.call(configPaths_2);
                                        }
                                        finally { if (e_2) throw e_2.error; }
                                    }
                                }
                                container = new inversify_1.Container();
                                bind = container.bind.bind(container);
                                unbind = container.unbind.bind(container);
                                logger_backend_module_1.bindLogger(bind);
                                frontend_application_bindings_1.bindMessageService(bind);
                                frontend_application_bindings_1.bindResourceProvider(bind);
                                filesystem_frontend_module_1.bindFileResource(bind);
                                user_storage_frontend_module_1.bindUserStorage(bind);
                                frontend_application_bindings_1.bindPreferenceService(bind);
                                filesystem_backend_module_1.bindFileSystem(bind);
                                bind(filesystem_watcher_protocol_1.FileSystemWatcherServer).toConstantValue(new mock_filesystem_watcher_server_1.MockFilesystemWatcherServer());
                                filesystem_preferences_1.bindFileSystemPreferences(bind);
                                container.bind(filesystem_1.FileShouldOverwrite).toConstantValue(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    return [2 /*return*/, true];
                                }); }); });
                                bind(filesystem_watcher_1.FileSystemWatcher).toSelf().inSingletonScope();
                                preference_bindings_1.bindPreferenceProviders(bind, unbind);
                                browser_1.bindWorkspacePreferences(bind);
                                container.bind(workspace_service_1.WorkspaceService).toSelf().inSingletonScope();
                                container.bind(window_service_1.WindowService).toConstantValue(new mock_window_service_1.MockWindowService());
                                workspaceServer = new mock_workspace_server_1.MockWorkspaceServer();
                                workspaceServer['getMostRecentlyUsedWorkspace'] = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    return [2 /*return*/, rootUri];
                                }); }); };
                                container.bind(workspace_protocol_1.WorkspaceServer).toConstantValue(workspaceServer);
                                launch_preferences_1.bindLaunchPreferences(bind);
                                toTearDown.push(container.get(filesystem_watcher_1.FileSystemWatcher));
                                impl = container.get(preference_service_1.PreferenceServiceImpl);
                                toTearDown.push(impl);
                                preferences = impl;
                                toTearDown.push(disposable_1.Disposable.create(function () { return preferences = undefined; }));
                                return [4 /*yield*/, preferences.ready];
                            case 1:
                                _c.sent();
                                return [4 /*yield*/, container.get(workspace_service_1.WorkspaceService).roots];
                            case 2:
                                _c.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            });
            afterEach(function () { return toTearDown.dispose(); });
            var testIt = !!only ? it.only : it;
            var settingsLaunch = settings ? settings['launch'] : undefined;
            testIt('get from default', function () {
                var config = preferences.get('launch');
                assert.deepStrictEqual(JSON.parse(JSON.stringify(config)), expectation);
            });
            testIt('get from undefined', function () {
                var config = preferences.get('launch', undefined, undefined);
                assert.deepStrictEqual(JSON.parse(JSON.stringify(config)), expectation);
            });
            testIt('get from rootUri', function () {
                var config = preferences.get('launch', undefined, rootUri);
                assert.deepStrictEqual(JSON.parse(JSON.stringify(config)), expectation);
            });
            testIt('inspect in undefined', function () {
                var inspect = preferences.inspect('launch');
                var expected = inspectExpectation;
                if (!expected) {
                    expected = {
                        preferenceName: 'launch',
                        defaultValue: defaultLaunch
                    };
                    var workspaceValue = launch || settingsLaunch;
                    if (workspaceValue !== undefined) {
                        Object.assign(expected, { workspaceValue: workspaceValue });
                    }
                }
                assert.deepStrictEqual(JSON.parse(JSON.stringify(inspect)), expected);
            });
            testIt('inspect in rootUri', function () {
                var inspect = preferences.inspect('launch', rootUri);
                var expected = {
                    preferenceName: 'launch',
                    defaultValue: defaultLaunch
                };
                if (inspectExpectation) {
                    Object.assign(expected, {
                        workspaceValue: inspectExpectation.workspaceValue,
                        workspaceFolderValue: inspectExpectation.workspaceValue
                    });
                }
                else {
                    var value = launch || settingsLaunch;
                    if (value !== undefined) {
                        Object.assign(expected, {
                            workspaceValue: value,
                            workspaceFolderValue: value
                        });
                    }
                }
                assert.deepStrictEqual(JSON.parse(JSON.stringify(inspect)), expected);
            });
            testIt('update launch', function () { return __awaiter(_this, void 0, void 0, function () {
                var inspect, actual, expected;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, preferences.set('launch', validLaunch)];
                        case 1:
                            _a.sent();
                            inspect = preferences.inspect('launch');
                            actual = inspect && inspect.workspaceValue;
                            expected = settingsLaunch && !Array.isArray(settingsLaunch) ? __assign({}, settingsLaunch, validLaunch) : validLaunch;
                            assert.deepStrictEqual(actual, expected);
                            return [2 /*return*/];
                    }
                });
            }); });
            testIt('update launch Global', function () { return __awaiter(_this, void 0, void 0, function () {
                var e_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, preferences.set('launch', validLaunch, preference_service_1.PreferenceScope.User)];
                        case 1:
                            _a.sent();
                            assert.fail('should not be possible to update User Settings');
                            return [3 /*break*/, 3];
                        case 2:
                            e_3 = _a.sent();
                            assert.deepStrictEqual(e_3.message, 'Unable to write to User Settings because launch does not support for global scope.');
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
            testIt('update launch Workspace', function () { return __awaiter(_this, void 0, void 0, function () {
                var inspect, actual, expected;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, preferences.set('launch', validLaunch, preference_service_1.PreferenceScope.Workspace)];
                        case 1:
                            _a.sent();
                            inspect = preferences.inspect('launch');
                            actual = inspect && inspect.workspaceValue;
                            expected = settingsLaunch && !Array.isArray(settingsLaunch) ? __assign({}, settingsLaunch, validLaunch) : validLaunch;
                            assert.deepStrictEqual(actual, expected);
                            return [2 /*return*/];
                    }
                });
            }); });
            testIt('update launch WorkspaceFolder', function () { return __awaiter(_this, void 0, void 0, function () {
                var e_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, preferences.set('launch', validLaunch, preference_service_1.PreferenceScope.Folder)];
                        case 1:
                            _a.sent();
                            assert.fail('should not be possible to update Workspace Folder Without resource');
                            return [3 /*break*/, 3];
                        case 2:
                            e_4 = _a.sent();
                            assert.deepStrictEqual(e_4.message, 'Unable to write to Folder Settings because no resource is provided.');
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
            testIt('update launch WorkspaceFolder with resource', function () { return __awaiter(_this, void 0, void 0, function () {
                var inspect, actual, expected;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, preferences.set('launch', validLaunch, preference_service_1.PreferenceScope.Folder, rootUri)];
                        case 1:
                            _a.sent();
                            inspect = preferences.inspect('launch');
                            actual = inspect && inspect.workspaceValue;
                            expected = settingsLaunch && !Array.isArray(settingsLaunch) ? __assign({}, settingsLaunch, validLaunch) : validLaunch;
                            assert.deepStrictEqual(actual, expected);
                            return [2 /*return*/];
                    }
                });
            }); });
            if ((launch && !Array.isArray(launch)) || (settingsLaunch && !Array.isArray(settingsLaunch))) {
                testIt('update launch.configurations', function () { return __awaiter(_this, void 0, void 0, function () {
                    var inspect, actual;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, preferences.set('launch.configurations', [validConfiguration, validConfiguration2])];
                            case 1:
                                _a.sent();
                                inspect = preferences.inspect('launch');
                                actual = inspect && inspect.workspaceValue && inspect.workspaceValue.configurations;
                                assert.deepStrictEqual(actual, [validConfiguration, validConfiguration2]);
                                return [2 /*return*/];
                        }
                    });
                }); });
            }
            testIt('delete launch', function () { return __awaiter(_this, void 0, void 0, function () {
                var actual, expected;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, preferences.set('launch', undefined)];
                        case 1:
                            _a.sent();
                            actual = preferences.inspect('launch');
                            expected = undefined;
                            if (configPaths[1]) {
                                expected = launch;
                                if (Array.isArray(expected)) {
                                    expected = __assign({}, expected);
                                }
                                if (expected && !expected.configurations && settingsLaunch && settingsLaunch.configurations !== undefined) {
                                    expected.configurations = settingsLaunch.configurations;
                                }
                            }
                            expected = expected || settingsLaunch;
                            assert.deepStrictEqual(actual && actual.workspaceValue, expected);
                            return [2 /*return*/];
                    }
                });
            }); });
            if ((launch && !Array.isArray(launch)) || (settingsLaunch && !Array.isArray(settingsLaunch))) {
                testIt('delete launch.configurations', function () { return __awaiter(_this, void 0, void 0, function () {
                    var actual, actualWorkspaceValue, expected, _settingsLaunch;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, preferences.set('launch.configurations', undefined)];
                            case 1:
                                _a.sent();
                                actual = preferences.inspect('launch');
                                actualWorkspaceValue = actual && actual.workspaceValue;
                                expected = undefined;
                                if (launch) {
                                    expected = __assign({}, launch);
                                    delete expected['configurations'];
                                }
                                if (settings) {
                                    _settingsLaunch = undefined;
                                    if (typeof settingsLaunch === 'object' && !Array.isArray(settings['launch']) && settings['launch'] !== null) {
                                        _settingsLaunch = settingsLaunch;
                                    }
                                    else {
                                        _settingsLaunch = expectation;
                                    }
                                    if (expected) {
                                        if (_settingsLaunch.configurations !== undefined) {
                                            expected.configurations = _settingsLaunch.configurations;
                                        }
                                    }
                                    else {
                                        expected = _settingsLaunch;
                                    }
                                }
                                assert.deepStrictEqual(actualWorkspaceValue, expected);
                                return [2 /*return*/];
                        }
                    });
                }); });
            }
        });
    }
});
//# sourceMappingURL=launch-preferences.spec.js.map