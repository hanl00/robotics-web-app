"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var fileIcons = require("file-icons-js");
var uri_1 = require("../common/uri");
var contribution_provider_1 = require("../common/contribution-provider");
var types_1 = require("../common/types");
var common_1 = require("../common");
exports.FOLDER_ICON = 'fa fa-folder';
exports.FILE_ICON = 'fa fa-file';
exports.LabelProviderContribution = Symbol('LabelProviderContribution');
var DefaultUriLabelProviderContribution = /** @class */ (function () {
    function DefaultUriLabelProviderContribution() {
    }
    DefaultUriLabelProviderContribution.prototype.canHandle = function (uri) {
        if (uri instanceof uri_1.default) {
            return 1;
        }
        return 0;
    };
    DefaultUriLabelProviderContribution.prototype.getIcon = function (uri) {
        var iconClass = this.getFileIcon(uri);
        if (!iconClass) {
            if (uri.displayName.indexOf('.') === -1) {
                return exports.FOLDER_ICON;
            }
            else {
                return exports.FILE_ICON;
            }
        }
        return iconClass;
    };
    DefaultUriLabelProviderContribution.prototype.getFileIcon = function (uri) {
        return fileIcons.getClassWithColor(uri.displayName);
    };
    DefaultUriLabelProviderContribution.prototype.getName = function (uri) {
        return uri.displayName;
    };
    DefaultUriLabelProviderContribution.prototype.getLongName = function (uri) {
        return uri.path.toString();
    };
    DefaultUriLabelProviderContribution = __decorate([
        inversify_1.injectable()
    ], DefaultUriLabelProviderContribution);
    return DefaultUriLabelProviderContribution;
}());
exports.DefaultUriLabelProviderContribution = DefaultUriLabelProviderContribution;
var LabelProvider = /** @class */ (function () {
    function LabelProvider() {
        this.onDidChangeEmitter = new common_1.Emitter();
    }
    /**
     * Start listening to contributions.
     *
     * Don't call this method directly!
     * It's called by the frontend application during initialization.
     */
    LabelProvider.prototype.initialize = function () {
        var e_1, _a;
        var _this = this;
        var contributions = this.contributionProvider.getContributions();
        var _loop_1 = function (contribution) {
            if (contribution.onDidChange) {
                contribution.onDidChange(function (event) {
                    var affects = function (uri) { return _this.affects(uri, event, contribution); };
                    _this.onDidChangeEmitter.fire({ affects: affects });
                });
            }
        };
        try {
            for (var contributions_1 = __values(contributions), contributions_1_1 = contributions_1.next(); !contributions_1_1.done; contributions_1_1 = contributions_1.next()) {
                var contribution = contributions_1_1.value;
                _loop_1(contribution);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (contributions_1_1 && !contributions_1_1.done && (_a = contributions_1.return)) _a.call(contributions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * When the given event occurs, determine if the given URI could in any
     * way be affected.
     *
     * If the event directly indicates that it affects the URI then of course we
     * return `true`.  However there may be label provider contributions that delegate
     * back to the label provider.  These contributors do not, and should not, listen for
     * label provider events because that would cause infinite recursion.
     *
     * @param uri
     * @param event
     */
    LabelProvider.prototype.affects = function (element, event, originatingContribution) {
        var e_2, _a, e_3, _b;
        var contribs = this.findContribution(element);
        var possibleContribsWithDups = [
            contribs.find(function (c) { return c.getIcon !== undefined; }),
            contribs.find(function (c) { return c.getName !== undefined; }),
            contribs.find(function (c) { return c.getLongName !== undefined; }),
        ];
        var possibleContribsWithoutDups = __spread(new Set(possibleContribsWithDups));
        try {
            for (var possibleContribsWithoutDups_1 = __values(possibleContribsWithoutDups), possibleContribsWithoutDups_1_1 = possibleContribsWithoutDups_1.next(); !possibleContribsWithoutDups_1_1.done; possibleContribsWithoutDups_1_1 = possibleContribsWithoutDups_1.next()) {
                var possibleContrib = possibleContribsWithoutDups_1_1.value;
                if (possibleContrib) {
                    if (possibleContrib === originatingContribution) {
                        if (event.affects(element)) {
                            return true;
                        }
                    }
                    if (possibleContrib.getConstituentUris) {
                        var constituentUris = possibleContrib.getConstituentUris(element);
                        try {
                            for (var constituentUris_1 = (e_3 = void 0, __values(constituentUris)), constituentUris_1_1 = constituentUris_1.next(); !constituentUris_1_1.done; constituentUris_1_1 = constituentUris_1.next()) {
                                var constituentUri = constituentUris_1_1.value;
                                if (this.affects(constituentUri, event, originatingContribution)) {
                                    return true;
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (constituentUris_1_1 && !constituentUris_1_1.done && (_b = constituentUris_1.return)) _b.call(constituentUris_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (possibleContribsWithoutDups_1_1 && !possibleContribsWithoutDups_1_1.done && (_a = possibleContribsWithoutDups_1.return)) _a.call(possibleContribsWithoutDups_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    Object.defineProperty(LabelProvider.prototype, "onDidChange", {
        get: function () {
            return this.onDidChangeEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    LabelProvider.prototype.getIcon = function (element) {
        return __awaiter(this, void 0, void 0, function () {
            var contribs, contrib;
            return __generator(this, function (_a) {
                contribs = this.findContribution(element);
                contrib = contribs.find(function (c) { return c.getIcon !== undefined; });
                if (!contrib) {
                    return [2 /*return*/, ''];
                }
                return [2 /*return*/, contrib.getIcon(element)];
            });
        });
    };
    LabelProvider.prototype.getName = function (element) {
        var contribs = this.findContribution(element);
        var contrib = contribs.find(function (c) { return c.getName !== undefined; });
        if (!contrib) {
            return '<unknown>';
        }
        return contrib.getName(element);
    };
    LabelProvider.prototype.getLongName = function (element) {
        var contribs = this.findContribution(element);
        var contrib = contribs.find(function (c) { return c.getLongName !== undefined; });
        if (!contrib) {
            return '';
        }
        return contrib.getLongName(element);
    };
    LabelProvider.prototype.findContribution = function (element) {
        var prioritized = types_1.Prioritizeable.prioritizeAllSync(this.contributionProvider.getContributions(), function (contrib) {
            return contrib.canHandle(element);
        });
        return prioritized.map(function (c) { return c.value; });
    };
    __decorate([
        inversify_1.inject(contribution_provider_1.ContributionProvider), inversify_1.named(exports.LabelProviderContribution),
        __metadata("design:type", Object)
    ], LabelProvider.prototype, "contributionProvider", void 0);
    LabelProvider = __decorate([
        inversify_1.injectable()
    ], LabelProvider);
    return LabelProvider;
}());
exports.LabelProvider = LabelProvider;
//# sourceMappingURL=label-provider.js.map